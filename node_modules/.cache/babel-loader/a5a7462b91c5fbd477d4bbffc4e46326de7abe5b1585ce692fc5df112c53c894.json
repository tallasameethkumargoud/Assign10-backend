{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samee\\\\OneDrive\\\\Desktop\\\\assignment9\\\\job-portal\\\\src\\\\utils\\\\ProtectedRoute.jsx\";\nimport React from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children,\n  allowedRoles\n}) => {\n  const authToken = localStorage.getItem(\"authToken\");\n  const userType = localStorage.getItem(\"userType\"); // Get the user's role (e.g., 'admin', 'employee')\n\n  // Redirect to login if not authenticated\n  if (!authToken) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 16\n    }, this);\n  }\n\n  // If roles are specified, check if the user's role matches allowed roles\n  if (allowedRoles) {\n    if (!allowedRoles.includes(userType)) {\n      // Redirect unauthorized roles\n      return userType === \"admin\" ? /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/admin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this);\n    }\n  }\n  return children;\n};\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","jsxDEV","_jsxDEV","ProtectedRoute","children","allowedRoles","authToken","localStorage","getItem","userType","to","fileName","_jsxFileName","lineNumber","columnNumber","includes","_c","$RefreshReg$"],"sources":["C:/Users/samee/OneDrive/Desktop/assignment9/job-portal/src/utils/ProtectedRoute.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nconst ProtectedRoute = ({ children, allowedRoles }) => {\r\n    const authToken = localStorage.getItem(\"authToken\");\r\n    const userType = localStorage.getItem(\"userType\"); // Get the user's role (e.g., 'admin', 'employee')\r\n\r\n    // Redirect to login if not authenticated\r\n    if (!authToken) {\r\n        return <Navigate to=\"/login\" />;\r\n    }\r\n\r\n    // If roles are specified, check if the user's role matches allowed roles\r\n    if (allowedRoles) {\r\n        if (!allowedRoles.includes(userType)) {\r\n            // Redirect unauthorized roles\r\n            return userType === \"admin\" ? (\r\n                <Navigate to=\"/admin\" />\r\n            ) : (\r\n                <Navigate to=\"/home\" />\r\n            );\r\n        }\r\n    }\r\n\r\n    return children;\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,cAAc,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAa,CAAC,KAAK;EACnD,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EACnD,MAAMC,QAAQ,GAAGF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;;EAEnD;EACA,IAAI,CAACF,SAAS,EAAE;IACZ,oBAAOJ,OAAA,CAACF,QAAQ;MAACU,EAAE,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACnC;;EAEA;EACA,IAAIT,YAAY,EAAE;IACd,IAAI,CAACA,YAAY,CAACU,QAAQ,CAACN,QAAQ,CAAC,EAAE;MAClC;MACA,OAAOA,QAAQ,KAAK,OAAO,gBACvBP,OAAA,CAACF,QAAQ;QAACU,EAAE,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,gBAExBZ,OAAA,CAACF,QAAQ;QAACU,EAAE,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CACzB;IACL;EACJ;EAEA,OAAOV,QAAQ;AACnB,CAAC;AAACY,EAAA,GAtBIb,cAAc;AAwBpB,eAAeA,cAAc;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}